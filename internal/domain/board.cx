package main

import "graphical2d"

/* Function     : initScene
   Description  : Initializes all game objects including the board cells, the
                  points, the ghosts and the player.
*/
func initScene() () {
  // Initialize game board items
  var line [28]i32
  
  for i:=0; i<y_cells; i++ {
    line = get_board_line(i32.add(i, 1))
    
    for j:=0; j<x_cells; j++ {
      initializeItem(i, j, line[j])
    }
  }

  // Initialize player
  player = newPlayer(PLAYER_SPAWN_LINE, PLAYER_SPAWN_COLUMN, PLAYER_RADIUS)
  nextLifePos = coords2position(LIFE_SPAWN_LINE, i32.sub(LIFE_SPAWN_COLUMN, PLAYER_LIVES - 1))

  // Initialize ghosts
  ghosts[0] = newGhost(11, 13, 0, GHOST_MODE_CHASE)     // Shadow
  ghosts[1] = newGhost(14, 11, 1, GHOST_MODE_IN_HOUSE)  // Speedy
  ghosts[2] = newGhost(14, 13, 2, GHOST_MODE_IN_HOUSE)  // Bashful
  ghosts[3] = newGhost(14, 15, 3, GHOST_MODE_IN_HOUSE)  // Pokey
}

func initializeItem(line i32, col i32, item_type i32) () {
  //x := f32.add(-1.0, f32.add(f32.mul(i32.f32(col), CELL_WIDTH), f32.div(CELL_WIDTH, 2.0)))
  //y := f32.sub(1.0, f32.add(f32.mul(i32.f32(line), CELL_HEIGHT), f32.div(CELL_HEIGHT, 2.0)))
  
  if i32.eq(item_type, WALL_CELL) {
    cells[line][col] = newCell(line, col, WALL_CELL)
  }
  if i32.eq(item_type, PATH_CELL) {
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, PATH_CELL_WITH_SIMPLE_POINT) {
    points[points_count] = newPoint(line, col, PATH_CELL_WITH_SIMPLE_POINT)
    points_count = i32.add(points_count, 1)
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, PATH_CELL_WITH_SUPER_POINT) {
    points[points_count] = newPoint(line, col, PATH_CELL_WITH_SUPER_POINT)
    points_count = i32.add(points_count, 1)
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, TELEPORT_CELL) { // FIX ME merge multiple cases together
    cells[line][col] = newCell(line, col, TELEPORT_CELL)
  }
  if i32.eq(item_type, GATE_CELL) {
    cells[line][col] = newCell(line, col, GATE_CELL)
  }
}

/* Function     : isLevelCompleted
   Output       : true if the level is completed, false otherwise.
   Description  : Checks if all the points on the board were caught allowing the
                  player to progress to the next level if this condition is met.
*/
func isLevelCompleted() (is_completed bool) {
  is_completed = true
  
  for i:=0; i<points_count; i++Â {
    if points[i].active {
      is_completed = false
    }
  }
}

// FIX ME change game settings
// Checks if all the points on the board were caught allowing the
// player to progress to the next level if this condition is met.
func levelUp() {
  if i32.lteq(GAME_LEVEL, GAME_MAX_LEVEL) {
    GAME_LEVEL = i32.add(GAME_LEVEL, 1)

    GHOST_RELEASE_LIMIT = f64.sub(GHOST_RELEASE_LIMIT, GHOST_RELESE_MODIFIER)

    GHOST_MOVEMENT_LIMIT = f64.sub(GHOST_MOVEMENT_LIMIT, GHOST_MOVEMENT_MODIFIER)

    GHOST_FRIGHTENED_LIMIT = f64.sub(GHOST_FRIGHTENED_LIMIT, GHOST_FRIGHTENED_MODIFIER)
    GHOST_FRIGHTENED_SEMI_LIMIT = f64.sub(GHOST_FRIGHTENED_SEMI_LIMIT, GHOST_FRIGHTENED_SEMI_MODIFIER)

    GHOST_CHASE_LIMIT = f64.add(GHOST_CHASE_LIMIT, GHOST_CHASE_MODIFIER)
    GHOST_SCATTER_LIMIT = f64.sub(GHOST_SCATTER_LIMIT, GHOST_SCATTER_MODIFIER)
  }
}

/* Function     : coords2position
   Input        : Vertical board position (line i32)
                : Horizontal board position (column i32)
   Output       : A position in the game screen (position graphical2d.Position2D)
   Description  : Maps a (line/column) pair into an actual screen coordinates
*/
func coords2position(line i32, column i32) (position graphical2d.Position2D) {
  x := f32.add(-1.0, f32.add(f32.mul(i32.f32(column), CELL_WIDTH), f32.div(CELL_WIDTH, 2.0)))
  y := f32.sub(1.0, f32.add(f32.mul(i32.f32(line), CELL_HEIGHT), f32.div(CELL_HEIGHT, 2.0)))

  position = graphical2d.newPosition2D(x, y)
}

func get_board_line(i i32) (line [28]i32) {
    if i32.eq(i, 1) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 2) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 3) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 4) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 5) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 6) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 7) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 8) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 9) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 10) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 11) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 12) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 13) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  5,  5,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 14) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 15) {
      line = [28]i32{3,  3,  3,  3,  3,  1,  0,  3,  3,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  3,  3,  0,  1,  3,  3,  3,  3,  3}
    }
    if i32.eq(i, 16) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 17) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 18) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 19) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 20) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 21) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 22) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 23) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 24) {
      line = [28]i32{1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  1}
    }
    if i32.eq(i, 25) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 26) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 27) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 28) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 29) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 30) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 31) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
}
