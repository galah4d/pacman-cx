package main

import "gl"
import "glfw"
import "graphical2d"

var x_cells i32 = 28
var y_cells i32 = 31

var CELL_WIDTH f32 = 0.07143
var CELL_HEIGHT f32 = 0.0645
var CELL_HALF_WIDTH f32 = CELL_WIDTH / 2.0
var CELL_HALF_HEIGHT f32 = CELL_HEIGHT / 2.0

// Game "constants"
var WIDTH_WINDOW i32 = 840
var HEIGHT_WINDOW i32 = 930

// Game flags
var GAME_LEVEL i32 = 1
var GAME_MAX_LEVEL i32 = 10
var GAME_OVER bool = false
var PLAYER_LIVES i32 = 3

// Item Types
var PATH_CELL i32 = 3
var WALL_CELL i32 = 1
var PATH_CELL_WITH_SIMPLE_POINT i32 = 0
var PATH_CELL_WITH_SUPER_POINT i32 = 2
var TELEPORT_CELL i32 = 4
var GATE_CELL i32 = 5

// Point constants
var SIMPLE_POINT_RADIUS f32 = 0.01
var SUPER_POINT_RADIUS f32 = 0.015
var POINT_COLOR_RED f32 = 1.0
var POINT_COLOR_GREEN f32 = 1.0
var POINT_COLOR_BLUE f32 = 1.0

// Directions
var UP i32 = 0
var DOWN i32 = 1
var LEFT i32 = 2
var RIGHT i32 = 3

// Player constants
var PLAYER_FACING i32 = LEFT
var PLAYER_COLOR_RED f32 = 1.0
var PLAYER_COLOR_GREEN f32 = 1.0
var PLAYER_COLOR_BLUE f32 = 0.0
var PLAYER_RADIUS f32 = 0.025
var PLAYER_SPAWN_LINE i32 = 23
var PLAYER_SPAWN_COLUMN i32 = 13

// Player vars 
var SCORE i32 = 0
var latestPlayerMoveEvent f64
var nextLifePos graphical2d.Position2D

// Animation timers
var PLAYER_ANIMATION_TIMER f64 = 0.0D
var PLAYER_ANIMATION_SEMI_LIMIT f64 = 0.25D
var PLAYER_ANIMATION_LIMIT f64 = 0.5D

var GHOST_ANIMATION_TIMER f64 = 0.0D
var GHOST_ANIMATION_SEMI_LIMIT f64 = 0.25D
var GHOST_ANIMATION_LIMIT f64 = 0.5D

var POINT_ANIMATION_TIMER f64 = 0.0D
var POINT_ANIMATION_SEMI_LIMIT f64 = 0.2D
var POINT_ANIMATION_LIMIT f64 = 0.4D

// Lives Variables
var LIFE_SPAWN_LINE i32 = 30
var LIFE_SPAWN_COLUMN i32 = 26
var LIFE_COLOR_RED f32 = 1.0
var LIFE_COLOR_GREEN f32 = 0.0
var LIFE_COLOR_BLUE f32 = 0.0
var LIFE_RADIUS f32 = 0.02

// Declaration of structss
type Player struct {
  position graphical2d.Position2D      // 2D position (x, y)
  color graphical2d.Color              // RGB color (r, g, b)
  radius f32
  direction i32
  index_x i32
  index_y i32
}
var player Player

type Cell struct {
  position graphical2d.Position2D
  dimensions graphical2d.Dimensions2D
  color graphical2d.Color
  index_x i32
  index_y i32
  ctype i32
}
var cells [31][28]Cell

type Ghost struct {
  position graphical2d.Position2D
  color graphical2d.Color
  radius f32
  index_x i32
  index_y i32
  direction i32
  gtype i32
  status i32
}
var ghosts [4]Ghost

type Point struct {
  position graphical2d.Position2D
  color graphical2d.Color
  radius f32
  ptype i32
  index_x i32
  index_y i32
  active bool
}
var points [1000] Point
var points_count i32 = 0


/***************************************
 * Declaration of constructor functions.
***************************************/

/* Function     : newPlayer
   Input        : Spawn line (line i32)
                : Spawn column (column i32)
                : Radius (rad f32)
   Output       : player (pl Player)
   Description  : Constructor for the Player struct.
*/
func newPlayer (line i32, column i32, rad f32) (pl Player) {
  var pos graphical2d.Position2D
  pos = coords2position(line, column)

  var col graphical2d.Color
  col = graphical2d.newColor(PLAYER_COLOR_RED, PLAYER_COLOR_GREEN, PLAYER_COLOR_BLUE)

  pl = Player{
    position: pos,
    color: col,
    radius: rad,
    direction: RIGHT,
    index_x: column,
    index_y: line}
}

/* Function     : newCell
   Input        : Spawn line (line i32)
                : Spawn column (column i32)
                : Cell type (ct i32)
   Output       : cell (cell Cell)
   Description  : Constructor for the Cell struct.
*/
func newCell (line i32, column i32, ct i32) (cell Cell) {
  var pos graphical2d.Position2D
  pos = coords2position(line, column)

  var dim graphical2d.Dimensions2D
  dim = graphical2d.newDimensions2D(CELL_HEIGHT, CELL_WIDTH)

  cell = Cell{
    position: pos,
    dimensions: dim,
    color: getCellColor(ct),
    index_x: column,
    index_y: line,
    ctype: ct}
}

/* Function     : newGhost
   Input        : Spawn line (line i32)
                : Spawn column (column i32)
                : Ghost type (gt i32)
                : Ghost movement mode (ghost_mode i32)
   Output       : ghost (ghost Ghost)
   Description  : Constructor for the Ghost struct.
*/
func newGhost(line i32, column i32, gt i32, ghost_mode i32) (ghost Ghost) {
  var pos graphical2d.Position2D
  pos = coords2position(line, column)

  var col graphical2d.Color
  col = getGhostColor(gt)

  ghost = Ghost{
    position: pos,
    color: col,
    radius: GHOST_RADIUS,
    index_x: column,
    index_y: line,
    direction: UP,
    gtype: gt,
    status: ghost_mode}
}

/* Function     : newPoint
   Input        : Spawn line (line i32)
                : Spawn column (column i32)
                : Point type (pt i32)
   Output       : point (point Point)
   Description  : Constructor for the Point struct.
*/
func newPoint (line i32, column i32, pt i32) (point Point) {
  var pos graphical2d.Position2D
  pos = coords2position(line, column)

  var col graphical2d.Color
  col = graphical2d.newColor(POINT_COLOR_RED, POINT_COLOR_GREEN, POINT_COLOR_BLUE)

  var rad f32
  if i32.eq(pt, PATH_CELL_WITH_SIMPLE_POINT) {
    rad = SIMPLE_POINT_RADIUS
  }
  if i32.eq(pt, PATH_CELL_WITH_SUPER_POINT) {
    rad = SUPER_POINT_RADIUS
  }

  point = Point {
    position: pos,
    color: col,
    radius: rad,
    ptype: pt,
    index_x: column,
    index_y: line,
    active: true}
}


/***************************************
 * Color management functions.
***************************************/

/* Function     : getCellColor
   Input        : Cell type (ctype i32)
   Output       : The cell color (color graphical2d.Color)
   Description  : Returns the color corresponding to the cell type.
*/
func getCellColor (ctype i32) (color graphical2d.Color) {
  if i32.eq(ctype, PATH_CELL) {
    color = graphical2d.newColor(0.0, 0.0, 0.0)
  }
  if i32.eq(ctype, WALL_CELL) {
    color = graphical2d.newColor(0.0, 0.0, 1.0)
  }
  if i32.eq(ctype, TELEPORT_CELL) {
    color = graphical2d.newColor(0.0, 1.0, 1.0)
  }
  if i32.eq(ctype, GATE_CELL) {
    color = graphical2d.newColor(1.0, 0.5, 0.0)
  }
}

/* Function     : getGhostColor
   Input        : Ghost type (gtype i32)
   Output       : The ghost color (color graphical2d.Color)
   Description  : Returns the color corresponding to the ghost type.
*/
func getGhostColor (gtype i32) (color graphical2d.Color) {
  if i32.eq(gtype, SHADOW_GHOST) {
    color = graphical2d.newColor(1.0, 0.0, 0.0) // Red color
  }
  if i32.eq(gtype, SPEEDY_GHOST) {
    color = graphical2d.newColor(1.0, 0.5, 1.0) // Pink color
  }
  if i32.eq(gtype, BASHFUL_GHOST) {
    color = graphical2d.newColor(0.0, 1.0, 1.0) // Cyan color
  }
  if i32.eq(gtype, POKEY_GHOST) {
    color = graphical2d.newColor(1.0, 0.5, 0.25) // Orange color
  }
}


/***************************************
 * Movement related functions.
***************************************/

/* Function     : canMove
   Input        : movement direction (direction i32)
                : vertical board position (line i32)
                : horizontal board position (column i32)
   Output       : true (if movement is possible), false (otherwise)
   Description  : Checks if a game object located at (line/column) can move in the input (direction).
*/
func canMove(direction i32, line i32, column i32) (can_move bool)  {
  if bool.and(i32.eq(direction, UP), i32.eq(cells[i32.sub(line, 1)][column].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, DOWN), i32.eq(cells[i32.add(line, 1)][column].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, LEFT), i32.eq(cells[line][i32.sub(column, 1)].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, RIGHT), i32.eq(cells[line][i32.add(column, 1)].ctype, PATH_CELL)) {
    can_move = true
  }
}

/* Function     : movePlayer
   Input        : Direction in which the player should move (direction i32)
   Description  : Manages the player movement.
*/
func movePlayer(direction i32) () {
  latestPlayerMoveEvent = glfw.GetTime()
  PLAYER_FACING = direction

  if bool.eq(canMove(direction, player.index_y, player.index_x), true) {
    // Move Up
    if i32.eq(direction, UP) {
      player.index_y = i32.sub(player.index_y, 1)
    }
    // Move Down
    if i32.eq(direction, DOWN) {
      player.index_y = i32.add(player.index_y, 1)
    }
    // Move Left
    if i32.eq(direction, LEFT) {
      player.index_x = i32.sub(player.index_x, 1)
    }
    // Move Right
    if i32.eq(direction, RIGHT) {
      player.index_x = i32.add(player.index_x, 1)
    }
    // Update the current player direction
    player.direction = direction
    // Update the player position
    player.position = coords2position(player.index_y, player.index_x)
  }

  // Check for collisions with ghosts
  // FIX ME remove double collision check
  for i:=0; i<4; i++ {
    checkPlayerGhostCollision(ghosts[i])
  }
}